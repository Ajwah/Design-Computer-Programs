{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"for",
				"formula"
			],
			[
				"ha",
				"hand_rank"
			],
			[
				"bigg",
				"biggest"
			],
			[
				"bigge",
				"biggest_hands"
			],
			[
				"big",
				"biggest_hands"
			],
			[
				"po",
				"possible_replaces"
			],
			[
				"tes",
				"test_best_wild_hand"
			],
			[
				"reduce",
				"reduceAll"
			],
			[
				"delete",
				"deleteRepeats"
			],
			[
				"p",
				"print"
			],
			[
				"re",
				"result"
			],
			[
				"opp",
				"opponents"
			],
			[
				"tmp",
				"tmp"
			],
			[
				"r",
				"registerPlayer(\"Shubacka	(tournament.py)"
			],
			[
				"rp",
				"replaceAllRepeatsZero"
			],
			[
				"extra",
				"extrasToExclude"
			],
			[
				"el",
				"elif"
			],
			[
				"get",
				"getPotentialOpponents"
			],
			[
				"amount",
				"amount_matches"
			],
			[
				"count",
				"countPlayers"
			],
			[
				"name",
				"namedtuple"
			],
			[
				"DB",
				"DB"
			],
			[
				"upda",
				"update_MW_OMW"
			],
			[
				"match",
				"matches_played"
			],
			[
				"play",
				"playerStandings"
			],
			[
				"player",
				"playerHistory"
			],
			[
				"pl",
				"playerHistory"
			],
			[
				"add",
				"addColumnToOpponentHist"
			],
			[
				"glob",
				"global_tmp"
			],
			[
				"opponent",
				"opponenthistory	(tournament.py)"
			],
			[
				"up",
				"updateOpponentHistory"
			],
			[
				"pla",
				"player"
			],
			[
				"playe",
				"player_id"
			],
			[
				"oppon",
				"opponent_id"
			],
			[
				"crea",
				"create_rows"
			],
			[
				"tabl",
				"tableContents"
			],
			[
				"string",
				"stringify"
			],
			[
				"col",
				"colSizes"
			],
			[
				"creat",
				"create_tournament"
			],
			[
				"dele",
				"deleteMatches"
			],
			[
				"matc",
				"matches_played"
			],
			[
				"ma",
				"matches_played"
			],
			[
				"de",
				"description"
			],
			[
				"fo",
				"for	for (…) {…} (plus) "
			],
			[
				"con",
				"con	console"
			],
			[
				"lo",
				"log(${0:$TM_SELECTED_TEXT"
			],
			[
				"fun",
				"fun	Anonymous Function"
			],
			[
				"fu",
				"fun	Anonymous Function"
			],
			[
				"f",
				"function"
			],
			[
				"if",
				"ife	if … else"
			]
		]
	},
	"buffers":
	[
		{
			"file": "poker.py",
			"settings":
			{
				"buffer_size": 6113,
				"line_ending": "Unix"
			}
		},
		{
			"file": "testing.py",
			"settings":
			{
				"buffer_size": 2397,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "def ints(start, end = None):\n    i = start\n    while i <= end or end is None:\n        yield i\n        i = i + 1\n\ndef all_ints():\n    \"Generate integers in the order 0, +1, -1, +2, -2, +3, -3, ...\"\ni    yield 0\n    for i in ints(1):\n        yield +i\n        yield -i\n\nj = ints(1)\nk = all_ints()\nfor i in xrange(0,20):\n  print next(j), next(k)\n",
			"file": "streams.py",
			"file_size": 341,
			"file_write_time": 130813056380000000,
			"settings":
			{
				"buffer_size": 342,
				"line_ending": "Unix",
				"name": "def ints(start, end = None):"
			}
		},
		{
			"file": "formula.py",
			"settings":
			{
				"buffer_size": 949,
				"line_ending": "Unix",
				"name": "import string, re, itertools"
			}
		},
		{
			"contents": "# --------------\n# User Instructions\n#\n# Modify the function compile_formula so that the function\n# it returns, f, does not allow numbers where the first digit\n# is zero. So if the formula contained YOU, f would return\n# False anytime that Y was 0\n\nimport re\nimport itertools\nimport string\n\ndef compile_formula(formula, verbose=False):\n    \"\"\"Compile formula into a function. Also return letters found, as a str,\n    in same order as parms of function. The first digit of a multi-digit\n    number can't be 0. So if YOU is a word in the formula, and the function\n    is called with Y eqal to 0, the function should return False.\"\"\"\n\n    # modify the code in this function.\n\n    letters = ''.join(set(re.findall('[A-Z]', formula)))\n    parms = ', '.join(letters)\n    tokens = map(compile_word, re.split('([A-Z]+)', formula))\n    body = ''.join(tokens)\n\n    \"\"\"The following few lines are my implementation, but I like teacher's one.\n    words = re.split('([A-Z][A-Z]+)', formula)\n    conditions = 'True'\n    for word in words:\n        if word.isalpha():\n            conditions += ' & ' + '(' + word[0] + ' != 0) '\n    \"\"\"\n    \"The teacher's one is as follows:\"\n    \"exract first letters of words of 2 capitalized letters or more\"\n    firstletters = set(re.findall(r'\\b([A-Z])[A-Z]', formula))\n    if firstletters:\n      'I love this syntax.'\n      tests = ' and '.join(L+'!=0' for L in firstletters)\n      body = '%s and (%s)'% (tests,body)\n    f = 'lambda %s: %s' % (parms, body)\n\n    if verbose: print f\n    return eval(f), letters\n\ndef compile_word(word):\n    \"\"\"Compile a word of uppercase letters as numeric digits.\n    E.g., compile_word('YOU') => '(1*U+10*O+100*Y)'\n    Non-uppercase words uncahanged: compile_word('+') => '+'\"\"\"\n    if word.isupper():\n        terms = [('%s*%s' % (10**i, d))\n                 for (i, d) in enumerate(word[::-1])]\n        return '(' + '+'.join(terms) + ')'\n    else:\n        return word\n\ndef faster_solve(formula):\n    \"\"\"Given a formula like 'ODD + ODD == EVEN', fill in digits to solve it.\n    Input formula is a string; output is a digit-filled-in string or None.\n    This version precompiles the formula; only one eval per formula.\"\"\"\n    f, letters = compile_formula(formula)\n    for digits in itertools.permutations((1,2,3,4,5,6,7,8,9,0), len(letters)):\n        try:\n            if f(*digits) is True:\n                table = string.maketrans(letters, ''.join(map(str, digits)))\n                return formula.translate(table)\n        except ArithmeticError:\n            pass\n\ndef test():\n    assert faster_solve('A + B == BA') == None # should NOT return '1 + 0 == 01'\n    assert faster_solve('YOU == ME**2') == ('289 == 17**2' or '576 == 24**2' or '841 == 29**2')\n    assert faster_solve('X / X == X') == '1 / 1 == 1'\n    return 'tests pass'\n\nprint test()",
			"file": "no_leading_zero.py",
			"file_size": 2794,
			"file_write_time": 130813376340000000,
			"settings":
			{
				"buffer_size": 2801,
				"line_ending": "Unix",
				"name": "# --------------"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 225.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"FindKeyConflicts: All Conflicts"
			],
			[
				"stacko",
				"Stackoverflow: Search Selection"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"pa",
				"PackageResourceViewer: Open Resource"
			],
			[
				"packa",
				"PackageResourceViewer: Open Resource"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: List Unmanaged Packages"
			],
			[
				"java",
				"Set Syntax: JavaScript"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"packa ",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 579.0
	},
	"console":
	{
		"height": 243.0,
		"history":
		[
			"clear",
			"jscs",
			"node",
			"jscs",
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/Coder/Documents/Python/Design Computer Programs"
	],
	"file_history":
	[
		"/Users/Coder/Documents/Python/Design Computer Programs/testing.py",
		"/Users/Coder/Documents/Python/Design Computer Programs/*REPL* [python].py",
		"/Users/Coder/Library/Application Support/Sublime Text 3/Packages/Default/Default (OSX).sublime-keymap",
		"/Users/Coder/Library/Application Support/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/Users/Coder/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap",
		"/Users/Coder/Documents/Python/fullstack/vagrant/tournament/tournament.py",
		"/Users/Coder/Documents/Python/fullstack/vagrant/forum/forumdb.py",
		"/Users/Coder/Documents/Python/fullstack/vagrant/forum/forum.py",
		"/Users/Coder/.zshrc",
		"/Users/Coder/Library/Application Support/Sublime Text 3/Packages/JavaScript/function.sublime-snippet",
		"/Users/Coder/Library/Application Support/Sublime Text 3/Packages/JavaScript/console.sublime-snippet",
		"/Users/Coder/Library/Application Support/Sublime Text 3/Packages/JavaScript/hello.sublime-snippet",
		"/Users/Coder/Library/Application Support/Sublime Text 3/Packages/JavaScript/for-()-{}-(faster).sublime-snippet",
		"/Users/Coder/Library/Application Support/Sublime Text 3/Packages/JavaScript/if.sublime-snippet",
		"/Users/Coder/Library/Application Support/Sublime Text 3/Packages/JavaScript/if-___-else.sublime-snippet",
		"/Users/Coder/Documents/Sublime/Web Development/.jscsrc",
		"/Users/Coder/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/Coder/Library/Application Support/Sublime Text 3/Packages/User/swi.sublime-settings",
		"/Users/Coder/Library/Application Support/Sublime Text 3/Packages/JavaScript/for-()-{}.sublime-snippet",
		"/Users/Coder/Web Development/.jscsrc",
		"/Users/Coder/Web Development/test.js",
		"/Users/Coder/Documents/Sublime/Web Development/test.js",
		"/Users/Coder/Library/Application Support/Sublime Text 3/Packages/Web Inspector/swi.sublime-settings",
		"/Users/Coder/Library/Application Support/Sublime Text 3/Packages/MacTerminal/MacTerminal.sublime-settings",
		"/Users/Coder/Library/Application Support/Sublime Text 3/Packages/User/MacTerminal.sublime-settings",
		"/Users/Coder/Library/Application Support/Sublime Text 3/Packages/SublimeLinter/SublimeLinter.sublime-settings"
	],
	"find":
	{
		"height": 43.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"\n    ",
			"fill_in",
			" ",
			"set",
			"(bj and (i[1]=='C' or i[1]=='S'))",
			"swissPairings",
			"hierarchy",
			"opponentHistory",
			"def",
			"q",
			"|",
			"657",
			"664",
			"660",
			"657",
			"665",
			"668",
			"665",
			"658",
			"657",
			"660",
			"664",
			"665",
			"657",
			"660",
			"657",
			"664",
			"tmp",
			"extrasToExclude",
			"print",
			"extra",
			"desc",
			"where",
			"from",
			"update_MW_OMW",
			"desc",
			"execute",
			"numeric",
			"update ",
			"update",
			"Update",
			"update",
			"execute",
			" desc ",
			"desc",
			"order by",
			"execute",
			"add column",
			"alter table ",
			"execute",
			"default",
			"values ",
			"insert into ",
			"execute",
			" AS ",
			" as ",
			"drop table if exists ",
			"create table ",
			"SELECT ",
			"select ",
			" from ",
			" FROM ",
			" from ",
			"select ",
			"SELECT ",
			"select ",
			"delete from",
			"delete from ",
			" WHERE ",
			" where ",
			" WHERE ",
			" where ",
			" WHERE ",
			" where ",
			" SET ",
			" set ",
			"set",
			"update",
			"UPDATE",
			"update",
			"Update",
			"update",
			"'opp[{0}] \"{0}\", '.format(str(i+1))",
			"return",
			"not",
			"loop",
			"in",
			"for",
			"end",
			"then",
			"is",
			"if",
			"begin",
			"declare",
			"returns",
			"function",
			"or replace",
			"create",
			"desc",
			"order by",
			"where",
			"as",
			"FROM",
			"from",
			"select",
			"sELECT",
			"select",
			"url",
			"shared_link",
			"%(col)s",
			"}s",
			"{",
			"%(",
			"matches_played = matches_played + 1 ",
			"loser",
			"\n        ",
			"winner",
			"loser",
			"winner",
			"( ",
			"print",
			"c.fetchall()",
			"psycopg2.",
			"DB = ",
			"losses",
			"digit",
			"ok grow",
			"TM_SELECTED_TEXT"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"itertools",
			"´",
			"i´"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "poker.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6113,
						"regions":
						{
						},
						"selection":
						[
							[
								6048,
								6048
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Python Improved/PythonImproved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "testing.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2397,
						"regions":
						{
						},
						"selection":
						[
							[
								2396,
								2396
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Python Improved/PythonImproved.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "streams.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 342,
						"regions":
						{
						},
						"selection":
						[
							[
								198,
								198
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "def ints(start, end = None):",
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/Python Improved/PythonImproved.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "formula.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 949,
						"regions":
						{
						},
						"selection":
						[
							[
								949,
								949
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "import string, re, itertools",
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/Python Improved/PythonImproved.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "no_leading_zero.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2801,
						"regions":
						{
						},
						"selection":
						[
							[
								1397,
								1397
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "# --------------",
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/Python Improved/PythonImproved.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 521.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 33.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 850.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/node.sublime-build",
	"project": "DCP.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Package Control Messages"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 375.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 378.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 147.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
